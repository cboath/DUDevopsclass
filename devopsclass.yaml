
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  mappingDbHost:
    Type: String
    Default: DuClassUsers


Resources: 
  # Create a role
  DUClassLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Description: "Role for performing functions in the class"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonEC2FullAccess"
        - "arn:aws:iam::aws:policy/AWSLambdaFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      RoleName: "DUClassLambdaRole"  

  # Create API gateway
  DuDevOpsApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: DuDevOpsApiGateway
      Parameters:
        endpointConfigurationTypes: EDGE

  # Create API Gateway Resource
  DuResource:  
    Type: 'AWS::ApiGateway::Resource'
    DependsOn: DuDevOpsApiGateway
    Properties:
      RestApiId: !Ref "DuDevOpsApiGateway"
      ParentId: !GetAtt
        - DuDevOpsApiGateway
        - RootResourceId
      PathPart: students 

  # Create API Gateway Methods
  studentGetMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      OperationName: "GetStudents"
      Integration:
        IntegrationHttpMethod: "GET"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "DuGetLambda.Arn"
      RestApiId: !Ref DuDevOpsApiGateway
      ResourceId: !Ref DuResource

  # Create API Gateway Method Options
  StudentResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref "DuDevOpsApiGateway"
      ResourceId: !Ref "DuResource"
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: "200"
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: "200"
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  # Create API Deployment
  DUDOCApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - "studentGetMethod"
    Properties:
      RestApiId: !Ref DuDevOpsApiGateway

  # Create API Stage
  DUDOCNonProd:
    Type: AWS::ApiGateway::Stage
    DependsOn: DuDevOpsApiGateway
    Properties:
      StageName: "NonProd"
      Description: "Non Prod stage for DUDOC Api Gateway"
      RestApiId: !Ref DuDevOpsApiGateway
      DeploymentId: !Ref DUDOCApiDeployment


  # Create Database table
  DUClassTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "EmployeeId"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "EmployeeId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      TableName: DuClassUsers

# Create lambda 
  DuGetLambda:
    Type: AWS::Lambda::Function 
    Properties:
      FunctionName: DuGetLambda
      Role: !Ref "DUClassLambdaRole"
      Handler: index.lambdaHandler
      Runtime: nodejs10.x
    # Code:
        # S3Bucket: !Ref "lambdaCodeBucket"
        # S3Key: !Sub "${apiRelease}/${lambdaSrcKeyPrefix}/lvMicMapping.zip"
      Environment:
        Variables:
          DB_HOST: !Ref "mappingDbHost"
      Timeout: 60


# Lambda Permission For API GateWay
  lambdaApiGatewayInvokeGetStudents:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref "DuGetLambda"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DuDevOpsApiGateway}/*" #We need to look into this.



  
